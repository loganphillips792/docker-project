---
# Source: portainer/templates/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
---

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: monitor
  namespace: monitoring
---

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: monitor
  namespace: monitoring
rules:
- apiGroups: [""]
  resources:
  - nodes
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
---

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: monitor
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: monitor
subjects:
- kind: ServiceAccount
  name: monitor
  namespace: monitoring
---

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring
data:
  prometheus.yml: |
    #prometheus.yml
    global:
      scrape_interval: 15s # scrape every 15 seconds
      external_labels:
        monitor: 'cluster'
        
    scrape_configs:
    - job_name: 'prometheus'
      scrape_interval: 5s
      static_configs:
      - targets: ['localhost:9090']
    - job_name: 'kubernetes-service-endpoints'
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_service_name]
        action: replace
        target_label: kubernetes_name
---

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus
        args:
            - "--config.file=/etc/prometheus/prometheus.yml"
        volumeMounts:
        - name: config-volume
          mountPath: /etc/prometheus/
          # subPath: prometheus.yml
        ports:
        - containerPort: 9090
      volumes:
      - name: config-volume
        configMap:
          name: prometheus-config
      serviceAccountName: monitor
---

---
kind: Service
apiVersion: v1
metadata:
  name: prometheus
  namespace: monitoring
spec:
  selector:
    app: prometheus
  type: NodePort
  ports:
  - name: promui
    nodePort: 30773
    protocol: TCP
    port: 9090
    targetPort: 9090
  
---

# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   annotations:
#     kompose.cmd: ../kompose convert -f docker-compose.yml
#     kompose.version: 1.28.0 (c4137012e)
#   creationTimestamp: null
#   labels:
#     io.kompose.service: prometheus
#   name: prometheus
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       io.kompose.service: prometheus
#   strategy:
#     type: Recreate
#   template:
#     metadata:
#       annotations:
#         kompose.cmd: ../kompose convert -f docker-compose.yml
#         kompose.version: 1.28.0 (c4137012e)
#       creationTimestamp: null
#       labels:
#         io.kompose.network/host-loki: "true"
#         io.kompose.service: prometheus
#     spec:
#       containers:
#         - args:
#             - --config.file=/etc/prometheus/prometheus.yml
#           image: prom/prometheus
#           name: prometheus
#           ports:
#             - containerPort: 9090
#           resources: {}
#           volumeMounts:
#             - mountPath: /etc/prometheus
#               name: prometheus-claim0
#             # - mountPath: /prometheus
#             #   name: prom-data
#       restartPolicy: Always
#       volumes:
#         - name: prometheus-claim0
#           persistentVolumeClaim:
#             claimName: prometheus-claim0
#         # - name: prom-data
#         #   persistentVolumeClaim:
#         #     claimName: prom-data
# status: {}
# ---

# ---
# apiVersion: v1
# kind: Service
# metadata:
#   annotations:
#     kompose.cmd: ../kompose convert -f docker-compose.yml
#     kompose.version: 1.28.0 (c4137012e)
#   creationTimestamp: null
#   labels:
#     io.kompose.service: prometheus
#   name: prometheus
# spec:
#   ports:
#     - name: "9090"
#       port: 9090
#       targetPort: 9090
#   selector:
#     io.kompose.service: prometheus
# status:
#   loadBalancer: {}
# ---

# ---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   creationTimestamp: null
#   labels:
#     io.kompose.service: prometheus-claim0
#   name: prometheus-claim0
# spec:
#   accessModes:
#     - ReadWriteOnce
#   resources:
#     requests:
#       storage: 100Mi
# status: {}
# ---

# ---
# apiVersion: v1
# kind: PersistentVolume
# metadata:
#   # namespace: home-assistant
#   name: prometheus-pv
# spec:
#   capacity:
#     storage: 1Gi
#   accessModes:
#     - ReadWriteOnce
#   local:
#     path: /kub/data/prometheus
#   persistentVolumeReclaimPolicy: Retain
#   storageClassName: local-storage
#   nodeAffinity:
#      required:
#       nodeSelectorTerms:
#         - matchExpressions:
#             - key: node-type
#               operator: In
#               values:
#                 - prometheus
# ---