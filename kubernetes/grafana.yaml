---
apiVersion: v1
kind: Service
metadata:
  namespace: kubernetes-project
  annotations:
    kompose.cmd: ./kompose convert -f host/docker-compose.yml
    kompose.version: 1.28.0 (c4137012e)
  creationTimestamp: null
  labels:
    io.kompose.service: grafana
  name: grafana
spec:
  type: NodePort
  ports:
    - name: "3000"
      port: 3000
      targetPort: 3000
      nodePort: 30776
  selector:
    io.kompose.service: grafana
status:
  loadBalancer: {}
---

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: kubernetes-project
  annotations:
    kompose.cmd: ./kompose convert -f host/docker-compose.yml
    kompose.version: 1.28.0 (c4137012e)
  creationTimestamp: null
  labels:
    io.kompose.service: grafana
  name: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: grafana
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: ./kompose convert -f host/docker-compose.yml
        kompose.version: 1.28.0 (c4137012e)
      creationTimestamp: null
      labels:
        io.kompose.network/host-loki: "true"
        io.kompose.service: grafana
    spec:
      containers:
        - env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              value: grafana
            - name: GF_SECURITY_ADMIN_USER
              value: admin
          image: grafana/grafana
          name: grafana
          ports:
            - containerPort: 3000
          resources: {}
          volumeMounts:
            - mountPath: /etc/grafana/provisioning/datasources
              name: grafana-claim0
      restartPolicy: Always
      volumes:
        - name: grafana-claim0
          persistentVolumeClaim:
            claimName: grafana-claim0
status: {}
---

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: kubernetes-project
  creationTimestamp: null
  labels:
    io.kompose.service: grafana-claim0
  name: grafana-claim0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---